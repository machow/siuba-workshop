---
title: Arrange
output: html_document
editor_options:
  chunk_output_type: console
chunk: wrangle
jupyter:
  jupytext:
    cell_metadata_filter: 'name,tags,-all'
    notebook_metadata_filter: purview
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.4
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
from setup import *
from setup import ___, _
```

### Exercise 1:

Modify the code below to arrange by artist name in **descending** order.

<details><summary>hint</summary>

> You can sort something in descending order, using the `-` operator.

<details><summary>another hint</summary>

> Start by using the pipe operator with `arrange()`. You will need to specify what to arrange by.

</details>
</details>

```{python}
(music_top200

)
```

```{python}
#| tags: [solution-code]
(music_top200
  >> arrange(-_.artist)
)
```

<prompt-expandable header="What artist is the last observation (row) in the result?">

<q-multiple-choice>
  <q-opt text="$NOT"><span>Great job!</span></q-opt>
  <q-opt text="黃宣"><span>That's not right. Did you arrange in ascending, rather than descending order?</span></q-opt>
  <q-opt text="Aaron Smith"><span>Incorrect</span></q-opt>
  <q-opt text="Y2K"><span>Incorrect</span></q-opt>    
</q-multiple-choice>

</prompt-expandable>

### Exercise 2:

What is the first track, if you filter to keep only observations from the country Mexico, and then sort in **ascending order** by track name?

```{python}
(music_top200
  >> ___
  >> arrange(___)
)
```

```{python}
#| tags: [solution-code]
(music_top200
  >> filter(_.country == "Mexico")
  >> arrange(_.track_name)
)
```

<prompt-expandable header="">

<q-multiple-choice>
  <q-opt text="11 PM"><span>Great job!</span></q-opt>
  <q-opt text="一天 (電視劇《想見你》插曲)"><span>Incorrect</span></q-opt>
  <q-opt text="everything i wanted"><span>Incorrect</span></q-opt>
  <q-opt text="#24"><span>Be sure to filter where country is Mexico</span></q-opt>    
</q-multiple-choice>

</prompt-expandable>

### Exercise 3: 

Below is code with the arrange verb removed. Modify it to arrange in ascending order..

* first by position
* second by streams

```{python}
(music_top200
  >> ___
)
```

```{python}
#| tags: [solution-code]
(music_top200
  >> arrange(_.position, _.streams)
)
```


<prompt-expandable header="What country has the position 1 track (The Box) with fewest streams?">

<q-multiple-choice>
  <q-opt text="Cyprus"><span>That's right! Make sure to double check that the track is named The Box by Roddy Ricch.</span></q-opt>
  <q-opt text="United States"><span>Incorrect</span></q-opt>
  <q-opt text="Brazil"><span>Incorrect</span></q-opt>
    <q-opt text="Luxembou"><span>Incorrect</span></q-opt>
</q-multiple-choice>

</prompt-expandable>

### Exercise 4

What's the shortest song in the top position in the `music_top200` data?

```{python}
#| tags: [empty-code]
# add code below this line



```

```{python}
#| tags: [solution-code]
# NOTE: there are multiple ways to get the answer!
(music_top200
  >> arrange(_.position, _.duration)
)
```


<prompt-expandable header="">

<q-multiple-choice>
  <q-opt text="Bad Girls, Good Vibes"><span>That's right!</span></q-opt>
  <q-opt text="Klop Klop"><span>Incorrect. This is the shortest track in any position. Can you sort to get top position tracks first?</span></q-opt>
  <q-opt text="Susamam"><span>Incorrect. This is the longest track in any position. Can you sort to get top position tracks first?</span></q-opt>
    <q-opt text="Blockparty"><span>Incorrect. This is the shortest track in the last position.</span></q-opt>
</q-multiple-choice>

</prompt-expandable>
