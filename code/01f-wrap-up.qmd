---
title: Wrap up
output: html_document
editor_options:
  chunk_output_type: console
chunk: wrangle
jupyter:
  jupytext:
    cell_metadata_filter: 'name,tags,-all'
    notebook_metadata_filter: purview
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.4
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
from setup import *
from setup import ___, _
```

### Putting it together

This lesson shows what the beginning of an analysis might look like. Generally, data analysis is done in **notebooks**, like this one. In a notebook, you can alternate between blocks of code and narrative text.

The first part of an analysis is often **importing** tools you will need for the analysis. For example, verbs like `filter` and `mutate` are imported from siuba.

The imports for this analysis are shown below.

``` python
# here we import verbs like filter, arrange, and mutate from siuba.
# the import * means to import all of siuba's verbs.
from siuba import *

# here we import everything for plotting from plotnine (like ggplot())
from plotnine import *

# here we import the data for the course
# note that rather than using * to get everything, you can name
# specific things to import (like track_features)
from music_top200 import music_top200, track_features
```

### Exercise 1:

For the artist with the top track in Spain, what country has the most streams for one of their tracks?

**Note: you may need to write and run code multiple times.**

<details>

<summary>hint</summary>

> First, find the artist in the top position in Spain. After, can you get only that artists tracks? Once you do that you should be close!

</details>

```{python}
# getting most streamed track for top artist in Spain
(


)
```

```{python}
#| tags: [solution-code]
#| jupyter: {source_hidden: true} 
# Note: I would run the pipe with...
#   * only the commented out filter first, to get the artist (KAROL G)
#   * then, with the uncommented filter and arrange
(music_top200 
  # >> filter(_.country == "Spain")
  >> filter(_.artist == "KAROL G")
  >> arrange(-_.streams)
)
```

### Exercise 2:

Subset to keep only tracks in Hong Kong, then calculate a new column called stream_seconds, that's equal to streams times their duration.

Once you've done that, try deleting the comments (`#`) in the code below to plot the data.

```{python}
(music_top200
  >> ___
  >> ___
  #>> ggplot(aes("stream_seconds", "position", color = "duration"))
  # + geom_point()
)
```

```{python}
#| jupyter: {source_hidden: true}
#| tags: [solution-code]
(music_top200
  >> filter(_.country == "Hong Kong")
  >> mutate(stream_seconds = _.streams * _.duration)
  >> ggplot(aes("stream_seconds", "position", color = "duration"))
   + geom_point()
)
```