---
title: Group by
output: html_document
editor_options:
  chunk_output_type: console
chunk: summarize
jupyter:
  jupytext:
    cell_metadata_filter: 'name,tags,-all'
    notebook_metadata_filter: purview
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.4
  kernelspec:
    display_name: venv-intro-to-siuba
    language: python
    name: venv-intro-to-siuba
---

```{python}
#| name: setup
#| tags: [input-details, setup]
# TODO: explain how to run this, and that they only need the gist (loads tools)

# wranglign ---------
import pandas as pd
from siuba import *

# plotting ----------
from plotnine import *

theme_set(theme_classic(base_family = "Noto Sans CJK JP"))

# data --------------
from music_top200 import music_top200, track_features

# student support ----------
from siuba import pipe
from IPython.display import HTML, display
from siututor import Blank
___ = Blank()

# DataFrame display --------
pd.set_option("display.max_rows", 6)

from IPython import get_ipython
# special ipython function to get the html formatter
html_formatter = get_ipython().display_formatter.formatters['text/html']

# here, we avoid the default df._repr_html_ method, since it inlines css
# (style tags make vue angry)
html_formatter.for_type(
    pd.DataFrame,
    lambda df: df.to_html(max_rows = pd.get_option("display.max_rows"), show_dimensions = True)
)

# remove the <ggplot: (528...)> printout
html_formatter.for_type(ggplot, lambda g: "")
```


import slides from '../slides/03b-slides.markdown'

<RevealSlides :slides="slides" />

### Exercise 1:

Modify the code below so it calculates max popularity and average danceability **for each artist**.

```{python}
artists = (track_features
  >> summarize(
      max_popularity = _.popularity.max(),
      avg_danceability = _.danceability.mean()
  )
)
artists
```

Make a scatterplot of the data.

```{python}
#| tags: [empty-code]




```

```{python}
#| tags: [solution-code]
artists = (track_features
  >> group_by(_.artist)
  >> summarize(
      max_popularity = _.popularity.max(),
      avg_danceability = _.danceability.mean()
  )
)

print(artists)

(artists
  >> ggplot(aes("max_popularity", "avg_danceability"))
   + geom_point()
)
```

In the plot above, what strange thing is going on with the distribution of max popularity?

<details>
<summary>possible answer</summary>

There are many artists with a max popularity of 0! 
  
</details>    

### Exercise 2:

In the last exercise of the facets chapter, you examined track features for three artists.

```{python}
# This code keeps the 3 artists listed ----

artists_to_keep = ["Billie Eilish", "ITZY", "Roddy Ricch"]

some_artists = (
  track_features
  >> filter(_.artist.isin(artists_to_keep))
)

#uncomment line below to see data
#some_artists
```

We used a plot and intuition to judge who tended to have highest energy and valence tracks.

```{python}
# This code plots the data ----
(some_artists
  >> ggplot(aes("energy", "valence", color = "artist"))
   + geom_point()
   + facet_wrap("~artist", nrow = 1)
   + labs(title = "Song features across 3 artists")
)
```

Now you should be able to answer the question more directly!

**Use a grouped summarize to calculate the mean energy and valence for each artist**.

```{python}
#| tags: [empty-code]
# summarizing mean energy and valence for each artist



```

```{python}
#| tags: [solution-code]
# This code plots the data ----
(some_artists
  >> group_by(_.artist)
  >> summarize(avg_energy = _.energy.mean(), avg_valence = _.valence.mean())
)
```

Q: In this data, which artist has the lowest average energy, and what is its value?

<details><summary>answer</summary>Billie Eilish, 0.321004</details>

Q: What about for lowest average valence?

<details><summary>answer</summary>Billie Eilish, 0.266948</details>
