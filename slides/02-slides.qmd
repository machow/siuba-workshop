---
title: Visualization with plotnine
execute: 
  echo: true
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.4
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

{{< include _setup.qmd >}}


:::{.notes}
In the last chapter, you used siuba to answer some questions about the music_top200 dataset.

You've been able to..

* filter for particular observations.
* arrange to find the highest or lowest values.
* mutate to add new columns.

However, most of the code so far has only printed out results as a table.
Often a better way to understand and present this kind of data is as a graph.

In this chapter, you'll learn the essential skill of data visualization using the plotnine package.
:::

# Visualizing with plotnine

```{python}
#| echo: false
# Reverse: can you find an artist with a different relationship, or is it a general trend?
(track_features
 >> filter(_.artist == "Billie Eilish")
 >> ggplot(aes("energy", "valence", size = "popularity", color = "acousticness", label = "track_name"))
  + geom_point()
  #+ geom_text(nudge_y = .1)
  + labs(title = "Billie Eilish hit track features")
)
```

:::{.notes}
In particular, this chapter will show you how to create scatterplots, like the one you see here.

Scatterplots compare two variables on an x- and y- axis.

Visualization and data wrangling are often intertwined, so you'll see how
the siuba and plotnine packages work closely together to create informative graphs.
:::

# Importing plotnine

<pre><code class="language-python">
from siuba import *
from plotnine import *
</code></pre>

:::{.notes}
You'll be creating plots using the plotnine package.

Just like the siuba package, you'll have to load it with `import`.
:::

# Variables

```{python}
billie = (
  track_features
  >> filter(_.artist == "Billie Eilish")
)
```

:::{.notes}
In this chapter, you'll sometimes be visualizing subsets of the `track_features` data.
For example, this code gets only tracks by the artist Billie Eilish.

When you're working with just that subset, sometimes it's useful to save the filtered data, as a new data frame.

To do this, you use the assignment operator.

**Click down for a breakdown of assignment**
:::

## Variables

```python
(
  track_features
  >> filter(_.artist == "Billie Eilish")
)
```

:::{.notes}
First, write out the pipe with the filter verb.

This is the same as you did in the previous chapter.

Note that whether the name of the data, `track_features` is right after the `(` or on its own line, the code works the same.
:::

## Variables

<pre><code class="language-python">
<mark>billie = </mark>(
  track_features
  >> filter(_.artist == "Billie Eilish")
)
</code></pre>

:::{.notes}
Then, write the variable name, followed by the variable operator (an equal sign).

In this case, the variable name is `billie`.
:::

# Variables (result)

```python
billie
```

```{python}
#| echo: false
from IPython.display import HTML
with pd.option_context('display.max_colwidth', 15):
    display(HTML(billie._repr_html_()))
```

:::{.notes}
Now if you print the `billie` dataset, we can see that it's another table.

But this one has only 27 rows: one for each track by Billie Eilish in the original data.
:::

# Visualizing with plotnine

```{python}
(billie
 >> ggplot(aes("energy", "valence"))
  + geom_point()
  + labs(title = "Billie Eilish hit track features")
)
```

:::{.notes}
Suppose you want to examine the energy and valence of Billie Eilish's songs.

You could do this with a scatterplot comparing two variables in our
track_features dataset: energy on the x-axis and valence on the y-axis.

There are three parts to a plotnine graph.

**(Click the down button to see a breakdown of the code)**
:::

## Visualizing with plotnine

<pre><code class="language-python">(<mark>billie</mark>
 >> ggplot(aes("energy", "valence"))
  + geom_point()
  + labs(title = "Billie Eilish hit track features")  
)
</code></pre>

::: {.notes}
First is the data that we're visualizing.
In this case, that is the `billie` variable you just created.
:::

## Visualizing with plotnine

<pre><code class="language-python">(billie
 >> ggplot(<mark>aes("energy", "valence")</mark>)
  + geom_point()
  + labs(title = "Billie Eilish hit track features")
)
</code></pre>

:::{.notes}
Second is the mapping of variables in your dataset to aesthetics in your graph.

An aesthetic is a visual dimension of a graph that can be used to communicate information.

In a scatterplot, your two dimensions are the x axis and the y axis, so you write aes (for
"aesthetic"), parentheses, x equals gdpPerCap, y = lifeExp, telling it which variables to place on which axes.
:::

## Visualizing with plotnine

<pre><code class="language-python">(billie
 >> ggplot(aes("energy", "valence"))
  <mark>+ geom_point()</mark>
  + labs(title = "Billie Eilish hit track features")
)
</code></pre>

:::{.notes}
The third step is specifying the type of graph you're creating.
You do that by adding a layer to the graph: use a plus after the ggplot, and then geom underscore point.

The "geom" means you're adding a type of geometric object to the graph, the
"point" indicates it's a scatter plot, where each observation corresponds to one point.

Together, these three parts of the code--the data, the
aesthetic mapping, and the layer--construct the scatter plot you see here.
:::

# Let's practice!

:::{.notes}
Scroll down to get started with practice!
:::
